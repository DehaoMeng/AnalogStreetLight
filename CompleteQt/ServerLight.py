# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ServerLight.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import socket

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *


class Thread(QThread):
    _signal = pyqtSignal(int, str, tuple, str)
    ip_address = []
    udp_socket = None

    def __init__(self):
        super(Thread, self).__init__()
        print("正在启动服务端")
        # 创建套接字
        self.udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # udp IPV4			tcp  IPV4
        # 绑定本地信息
        self.udp_socket.bind(('', 8000))
        print("启动成功")

    def __del__(self):
        self.wait()

    def run(self):
        while True:
            # 接收终端的数据
            recv_data_T, address = self.udp_socket.recvfrom(1024)  # 接收温度
            recv_data_W, address = self.udp_socket.recvfrom(1024)  # 接收湿度
            recv_data_L, address = self.udp_socket.recvfrom(1024)  # 接收环境照度
            recv_data_T = recv_data_T.decode('utf-8')
            recv_data_W = recv_data_W.decode('utf-8')
            recv_data_L = recv_data_L.decode('utf-8')
            print("您接收到来自" + address[0] + "的数据为")
            print("温度为:" + recv_data_T)
            print("湿度为:" + recv_data_W + "%")
            print("亮度为:" + recv_data_L)

            # 退出数据传送判断
            if recv_data_T == '#' or recv_data_W == '#' or recv_data_L == '#':
                break
            # 判断是否满足开灯条件
            if recv_data_T <= '15' and recv_data_W <= '50' or recv_data_L <= '30':
                self.udp_socket.sendto(b"open", address)
                self.bind(address, (recv_data_T, recv_data_W, recv_data_L), 'open')
            elif recv_data_T != '20' or recv_data_L != '5' or recv_data_W != '25':
                self.udp_socket.sendto(b"close", address)
                self.bind(address, (recv_data_T, recv_data_W, recv_data_L), 'close')

    def bind(self, address, data, status):
        if address[0] in self.ip_address:
            self._signal.emit(self.ip_address.index(address[0]), address[0], data, status)
        else:
            if len(self.ip_address) < 3:
                self.ip_address.append(address[0])
                self._signal.emit(self.ip_address.index(address[0]), address[0], data, status)
            else:
                self._signal.emit(-1, (), '')

    @property
    def signal(self):
        return self._signal


class Ui_ServerLight(object):
    ip_address = []
    thread = None
    list1 = []
    list2 = []
    list3 = []
    def setupUi(self, ServerLight):
        ServerLight.setObjectName("ServerLight")
        ServerLight.setEnabled(True)
        ServerLight.resize(640, 480)
        ServerLight.setAutoFillBackground(False)
        self.centralwidget = QtWidgets.QWidget(ServerLight)
        self.centralwidget.setObjectName("centralwidget")
        self.light1 = QtWidgets.QFrame(self.centralwidget)
        self.light1.setGeometry(QtCore.QRect(30, 19, 201, 211))
        self.light1.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.light1.setFrameShadow(QtWidgets.QFrame.Raised)
        self.light1.setObjectName("light1")
        self.liststatus1 = QtWidgets.QListView(self.light1)
        self.liststatus1.setGeometry(QtCore.QRect(10, 60, 171, 131))
        self.liststatus1.setObjectName("liststatus1")
        self.label = QtWidgets.QLabel(self.light1)
        self.label.setGeometry(QtCore.QRect(20, 10, 60, 16))
        self.label.setObjectName("label")
        self.ip1 = QtWidgets.QLabel(self.light1)
        self.ip1.setGeometry(QtCore.QRect(70, 10, 60, 16))
        self.ip1.setObjectName("ip1")
        self.light3 = QtWidgets.QFrame(self.centralwidget)
        self.light3.setGeometry(QtCore.QRect(30, 240, 201, 221))
        self.light3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.light3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.light3.setObjectName("light3")
        self.ip3 = QtWidgets.QLabel(self.light3)
        self.ip3.setGeometry(QtCore.QRect(70, 10, 60, 16))
        self.ip3.setObjectName("ip3")
        self.label_3 = QtWidgets.QLabel(self.light3)
        self.label_3.setGeometry(QtCore.QRect(20, 10, 60, 16))
        self.label_3.setObjectName("label_3")
        self.liststatus3 = QtWidgets.QListView(self.light3)
        self.liststatus3.setGeometry(QtCore.QRect(10, 60, 171, 131))
        self.liststatus3.setObjectName("liststatus1_2")
        self.light2 = QtWidgets.QFrame(self.centralwidget)
        self.light2.setGeometry(QtCore.QRect(309, 19, 201, 211))
        self.light2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.light2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.light2.setObjectName("light2")
        self.ip2 = QtWidgets.QLabel(self.light2)
        self.ip2.setGeometry(QtCore.QRect(70, 10, 60, 16))
        self.ip2.setObjectName("ip2")
        self.label_2 = QtWidgets.QLabel(self.light2)
        self.label_2.setGeometry(QtCore.QRect(20, 10, 60, 16))
        self.label_2.setObjectName("label_2")
        self.liststatus2 = QtWidgets.QListView(self.light2)
        self.liststatus2.setGeometry(QtCore.QRect(10, 60, 171, 131))
        self.liststatus2.setObjectName("liststatus2")
        self.openServer = QtWidgets.QPushButton(self.centralwidget)
        self.openServer.setGeometry(QtCore.QRect(530, 250, 81, 26))
        self.openServer.setObjectName("openServer")
        self.CloseServer = QtWidgets.QPushButton(self.centralwidget)
        self.CloseServer.setGeometry(QtCore.QRect(530, 300, 81, 26))
        self.CloseServer.setObjectName("CloseServer")
        self.devicemsg = QtWidgets.QFrame(self.centralwidget)
        self.devicemsg.setGeometry(QtCore.QRect(309, 240, 201, 211))
        self.devicemsg.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.devicemsg.setFrameShadow(QtWidgets.QFrame.Raised)
        self.devicemsg.setObjectName("devicemsg")
        self.devicelist = QtWidgets.QListView(self.devicemsg)
        self.devicelist.setGeometry(QtCore.QRect(0, 50, 201, 161))
        self.devicelist.setObjectName("devicelist")
        self.label_4 = QtWidgets.QLabel(self.devicemsg)
        self.label_4.setGeometry(QtCore.QRect(10, 10, 60, 16))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(519, 25, 101, 41))
        self.label_5.setObjectName("label_5")
        self.serverstatus = QtWidgets.QLabel(self.centralwidget)
        self.serverstatus.setGeometry(QtCore.QRect(550, 70, 31, 21))
        self.serverstatus.setObjectName("serverstatus")
        ServerLight.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(ServerLight)
        self.statusbar.setObjectName("statusbar")
        ServerLight.setStatusBar(self.statusbar)

        self.retranslateUi(ServerLight)
        QtCore.QMetaObject.connectSlotsByName(ServerLight)

    def retranslateUi(self, ServerLight):
        _translate = QtCore.QCoreApplication.translate
        ServerLight.setWindowTitle(_translate("ServerLight", "ServerLight"))
        self.label.setText(_translate("ServerLight", "设备1"))
        self.ip1.setText(_translate("ServerLight", "ip地址1"))
        self.ip3.setText(_translate("ServerLight", "ip地址3"))
        self.label_3.setText(_translate("ServerLight", "设备3"))
        self.ip2.setText(_translate("ServerLight", "ip地址2"))
        self.label_2.setText(_translate("ServerLight", "设备2"))
        self.openServer.setText(_translate("ServerLight", "开机"))
        self.CloseServer.setText(_translate("ServerLight", "关机"))
        self.label_4.setText(_translate("ServerLight", "设备信息"))
        self.label_5.setText(_translate("ServerLight", "当前服务器状态:"))
        self.serverstatus.setText(_translate("ServerLight", "关机"))
        # 开关事件
        self.openServer.clicked.connect(self.server)
        self.CloseServer.clicked.connect(self.server)

    # 开关服务器
    def server(self):
        if self.serverstatus.text() == "关机" and not self.thread:
            self.thread = Thread()
            self.thread.start()
            self.serverstatus.setText("开机")
            self.thread.signal.connect(self.display)
        elif self.serverstatus.text() == "开机" and self.thread:
            self.thread = None
            self.serverstatus.setText("关机")

    def display(self, event, ip, msg, status):
        if ip and ip not in self.ip_address:
            self.ip_address.append(ip)
            slm = QStringListModel()
            slm.setStringList(self.ip_address)
            self.devicelist.setModel(slm)
        if event == 0:
            self.ip1.setText(ip)
            self.list1.append("温度:"+msg[0]+",湿度:"+msg[1]+"%,亮度:"+msg[2])
            slm = QStringListModel()
            slm.setStringList(self.list1)
            self.liststatus1.setModel(slm)
        elif event == 1:
            self.ip2.setText(ip)
        elif event == 2:
            self.ip3.setText(ip)


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ServerLight = QtWidgets.QMainWindow()
    ui = Ui_ServerLight()
    ui.setupUi(ServerLight)
    ServerLight.show()
    sys.exit(app.exec_())
